const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
const gridSize = 20;
const hitboxSize = gridSize * 0.6;
const hitboxOffset = (gridSize - hitboxSize) / 2;
const rows = canvas.height / gridSize;
const cols = canvas.width / gridSize;

let snake = [{ x: gridSize * Math.floor(cols / 2), y: gridSize * Math.floor(rows / 2) }];
let dx = gridSize;
let dy = 0;
let mouse = {};
spawnMouse();

const snakeIcon = new Image();
const snakeIconSvg = `
<svg fill="#000000" height="800px" width="800px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
viewBox="0 0 512 512" xml:space="preserve">
<g>
<path d="M512,168.316c0-32.748-10.197-60.547-25.454-74.459C465,51.433,384.513,58.445,313.399,64.651
   c-21.366,1.864-41.553,3.623-57.399,3.661c-15.846-0.039-36.033-1.798-57.399-3.661C127.486,58.447,47,51.432,25.454,93.857
   C10.197,107.768,0,135.568,0,168.316c0,18.328,3.203,35.096,8.689,48.761C8.249,218.067,8,219.162,8,220.316
   c0,46.345,10.999,78.972,33.624,99.746c23.577,21.648,56.672,27.353,92.686,27.353c20.315,0,41.562-1.816,62.548-3.61
   c17.084-1.46,34.654-2.952,51.143-3.367v68.273l-29.657,29.657c-3.125,3.124-3.125,8.189,0,11.313
   c1.562,1.562,3.609,2.343,5.657,2.343s4.095-0.781,5.657-2.343L256,423.338l26.343,26.343c1.562,1.562,3.609,2.343,5.657,2.343
   s4.095-0.781,5.657-2.343c3.125-3.124,3.125-8.189,0-11.313L264,408.711v-68.273c16.489,0.414,34.059,1.906,51.143,3.367
   c20.989,1.794,42.229,3.61,62.548,3.61c36.01,0,69.11-5.707,92.686-27.353C493.001,299.288,504,266.66,504,220.316
   c0-1.154-0.249-2.248-0.689-3.239C508.797,203.411,512,186.644,512,168.316z M496,168.316c0,19.025-3.834,36.788-10.795,50.014
   c-6.016,11.43-13.745,17.986-21.205,17.986s-15.189-6.556-21.205-17.986C435.834,205.103,432,187.341,432,168.316
   s3.834-36.788,10.795-50.014c6.016-11.43,13.745-17.986,21.205-17.986s15.189,6.556,21.205,17.986
   C492.166,131.528,496,149.29,496,168.316z M26.795,118.302c6.016-11.43,13.745-17.986,21.205-17.986s15.189,6.556,21.205,17.986
   C76.166,131.528,80,149.29,80,168.316s-3.834,36.788-10.795,50.014C63.189,229.76,55.46,236.316,48,236.316
   s-15.189-6.556-21.205-17.986C19.834,205.103,16,187.341,16,168.316S19.834,131.528,26.795,118.302z M459.555,308.276
   c-31.698,29.105-88.305,24.268-143.049,19.587c-17.464-1.493-35.431-3.02-52.506-3.431V180.553
   c14.973,0.857,29.093,4.113,41.222,9.561c21.542,9.676,37.5,26.284,47.429,49.364c11.637,27.048,25.999,46.695,42.686,58.394
   c10.979,7.697,22.906,11.68,34.545,11.68c4.072,0,8.11-0.488,12.058-1.475c4.286-1.072,6.892-5.415,5.821-9.702
   c-1.072-4.287-5.416-6.894-9.702-5.821c-10.816,2.705-22.415,0.013-33.538-7.784c-14.02-9.829-26.874-27.678-37.173-51.616
   c-25.167-58.498-78.267-68.392-109.169-68.821c-0.694-0.196-1.423-0.308-2.18-0.308s-1.486,0.112-2.18,0.308
   c-30.902,0.43-84.001,10.324-109.169,68.821c-10.299,23.938-23.154,41.787-37.173,51.616c-11.122,7.797-22.72,10.489-33.538,7.784
   c-4.288-1.069-8.63,1.535-9.702,5.821c-1.071,4.287,1.535,8.63,5.821,9.702c15.232,3.809,31.783,0.184,46.604-10.206
   c16.687-11.699,31.048-31.346,42.686-58.394c9.93-23.08,25.887-39.688,47.429-49.364c12.129-5.448,26.249-8.704,41.222-9.561
   v143.879c-17.075,0.411-35.041,1.939-52.506,3.431c-54.744,4.68-111.351,9.518-143.049-19.587
   c-15.555-14.282-24.614-35.961-27.462-65.917c6.797,6.367,14.623,9.957,23.017,9.957c26.916,0,48-36.897,48-84
   c0-41.76-16.577-75.475-39.094-82.592c9.792-4.638,23.178-7.581,40.32-8.9c30.187-2.323,67.268,0.911,99.984,3.766
   c21.426,1.869,41.681,3.632,58.09,3.717c0.054,0.001,0.107,0.008,0.161,0.008c0.177,0,0.36-0.003,0.538-0.004
   c0.178,0,0.361,0.004,0.538,0.004c0.054,0,0.107-0.007,0.161-0.008c16.409-0.085,36.665-1.848,58.09-3.717
   c32.715-2.854,69.794-6.089,99.984-3.766c17.142,1.319,30.528,4.262,40.32,8.9C432.577,92.84,416,126.555,416,168.316
   c0,47.103,21.084,84,48,84c8.394,0,16.22-3.59,23.017-9.957C484.169,272.315,475.111,293.993,459.555,308.276z"/>
<path d="M464,124.316c-9.731,0-12.542,12.651-13.466,16.809C448.9,148.477,448,158.134,448,168.316s0.9,19.839,2.534,27.191
   c0.924,4.157,3.735,16.809,13.466,16.809s12.542-12.651,13.466-16.809c1.634-7.353,2.534-17.009,2.534-27.191
   s-0.9-19.839-2.534-27.191C476.542,136.967,473.731,124.316,464,124.316z"/>
<path d="M48,212.316c9.731,0,12.542-12.651,13.466-16.809C63.1,188.155,64,178.498,64,168.316s-0.9-19.839-2.534-27.191
   c-0.924-4.158-3.735-16.809-13.466-16.809s-12.542,12.651-13.466,16.809C32.9,148.477,32,158.134,32,168.316
   s0.9,19.839,2.534,27.191C35.458,199.664,38.269,212.316,48,212.316z"/>
</g>
</svg>`;

snakeIcon.src = 'data:image/svg+xml,' + encodeURIComponent(snakeIconSvg);

const mouseIcon = new Image();
const mouseIconSvg = `
<svg fill="#000000" height="800px" width="800px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
 viewBox="0 0 197.654 197.654" xml:space="preserve">
<g>
<g>
    <g>
        <path d="M38.807,147.588c-6.811,0-12.352,5.541-12.352,12.352c0,6.811,5.541,12.352,12.352,12.352
            c6.811,0,12.352-5.541,12.352-12.352C51.159,153.129,45.619,147.588,38.807,147.588z M38.807,164.057
            c-2.27,0-4.117-1.845-4.117-4.117c0-2.272,1.847-4.117,4.117-4.117c2.27,0,4.117,1.845,4.117,4.117
            C42.924,162.212,41.077,164.057,38.807,164.057z"/>
        <path d="M173.144,76.994c-17.959-20.285-24.378-37.832-18.562-50.747c5.661-12.573,21.658-18.013,28.57-18.013
            c2.274,0,4.117-1.842,4.117-4.117S185.426,0,183.152,0c-10.398,0-29.054,7.265-36.079,22.866
            c-5.052,11.218-5.7,30.663,19.907,59.589c16.487,18.624,23.327,33.719,19.782,43.654c-3.29,9.218-14.965,11.925-17.011,12.335
            c-7.14-16.349-23.859-31.37-61.23-31.37c-11.461,0-24.435,2.396-37.733,6.956c-5.14-10.88-15.028-17.197-24.67-15.319
            c-6.112,1.186-11.174,5.388-14.252,11.837c-2.881,6.031-3.681,13.393-2.256,20.727c0.205,1.057,0.456,2.111,0.752,3.144
            C12.387,146.835,1.75,159.995,1.75,169.951c0,24.346,43.002,27.703,89.471,27.703c44.782,0,83.456,0,83.456-33.706
            c0-5.262-0.531-11.406-2.199-17.673c4.753-1.121,17.65-5.21,22.018-17.34C199.223,115.811,192.038,98.337,173.144,76.994z
             M91.223,189.42c-34.874,0-81.236-2.019-81.236-19.469c0-6.087,8.516-17.86,27.539-30.433l2.76-1.826l-1.188-3.088
            c-0.603-1.568-1.075-3.216-1.401-4.898c-1.091-5.617-0.523-11.162,1.602-15.609c1.926-4.033,4.905-6.631,8.391-7.306
            c0.595-0.117,1.194-0.173,1.797-0.173c6.029,0,12.275,5.641,15.064,13.932l1.355,4.025l3.983-1.48
            c13.701-5.094,27.06-7.788,38.634-7.788c47.874,0.001,57.921,26.45,57.921,48.64C166.444,188.238,139.263,189.42,91.223,189.42z"
            />
    </g>
</g>
</g>
</svg>`;
mouseIcon.src = 'data:image/svg+xml,' + encodeURIComponent(mouseIconSvg);

function spawnMouse() {
  mouse = {
    x: gridSize * Math.floor(Math.random() * cols),
    y: gridSize * Math.floor(Math.random() * rows),
  };
}

function drawSnakeIcon(x, y) {
  ctx.drawImage(snakeIcon, x, y, gridSize, gridSize);
}

function drawMouseIcon(x, y) {
  ctx.drawImage(mouseIcon, x, y, gridSize, gridSize);
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  snake.forEach((part, index) => {
    if (index === 0) {
      drawSnakeIcon(part.x, part.y);
    } else {
      ctx.fillStyle = 'green';
      ctx.fillRect(part.x, part.y, gridSize, gridSize);
      ctx.strokeStyle = 'white';
      ctx.strokeRect(part.x, part.y, gridSize, gridSize);
    }
  });

  drawMouseIcon(mouse.x, mouse.y);
}

function update() {
  const newX = (snake[0].x + dx + canvas.width) % canvas.width;
  const newY = (snake[0].y + dy + canvas.height) % canvas.height;
  const newHead = { x: newX, y: newY };

  if (
    snake[0].x + hitboxOffset < mouse.x + hitboxSize &&
    snake[0].x + hitboxSize > mouse.x + hitboxOffset &&
    snake[0].y + hitboxOffset < mouse.y + hitboxSize &&
    snake[0].y + hitboxSize > mouse.y + hitboxOffset
  ) {
    spawnMouse();
  } else {
    snake.pop();
  }

  snake.unshift(newHead);

  for (let i = 1; i < snake.length; i++) {
    if (snake[i].x === newX && snake[i].y === newY) {
      snake.length = i;
      break;
    }
  }
}

function gameLoop() {
  draw();
  update();
  setTimeout(gameLoop, 100);
}

document.addEventListener('keydown', (e) => {
  if (e.key === 'ArrowUp' && dy !== gridSize) {
    dx = 0;
    dy = -gridSize;
  } else if (e.key === 'ArrowDown' && dy !== -gridSize) {
    dx = 0;
    dy = gridSize;
  } else if (e.key === 'ArrowLeft' && dx !== gridSize) {
    dx = -gridSize;
    dy = 0;
  } else if (e.key === 'ArrowRight' && dx !== -gridSize) {
    dx = gridSize;
    dy = 0;
  }
});

canvas.addEventListener('touchstart', (e) => {
    e.preventDefault();
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
  });
  
  canvas.addEventListener('touchmove', (e) => {
    e.preventDefault();
    const touchEndX = e.touches[0].clientX;
    const touchEndY = e.touches[0].clientY;
    const deltaX = touchEndX - touchStartX;
    const deltaY = touchEndY - touchStartY;
  
    if (Math.abs(deltaX) > Math.abs(deltaY)) {
      if (deltaX > 0 && dx !== -gridSize) {
        dx = gridSize;
        dy = 0;
      } else if (deltaX < 0 && dx !== gridSize) {
        dx = -gridSize;
        dy = 0;
      }
    } else {
      if (deltaY > 0 && dy !== -gridSize) {
        dx = 0;
        dy = gridSize;
      } else if (deltaY < 0 && dy !== gridSize) {
        dx = 0;
        dy = -gridSize;
      }
    }
  
    touchStartX = touchEndX;
    touchStartY = touchEndY;
  });
  
  Promise.all([
    new Promise((resolve) => snakeIcon.addEventListener('load', resolve)),
    new Promise((resolve) => mouseIcon.addEventListener('load', resolve)),
  ]).then(() => {
    gameLoop();
  });
  




